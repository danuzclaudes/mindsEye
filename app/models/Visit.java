package models;

import com.avaje.ebean.Model;

import javax.persistence.*;
import java.util.Date;
import java.util.List;

@Entity
@Table(name = "visit")
public class Visit extends Model {
    @Id
    @Column(name="visit_id", columnDefinition = "varchar(32)")
    public String visitId;  // md5 hashes for a visit id generated by current timestamp
    @Column(name="visit_date", columnDefinition = "date not null default CURRENT_DATE")
    public Date visitDate;
    @Column(name="cgi_score", columnDefinition = "integer not null")
    public int cgiScore;
    @Column(name="visit_group", columnDefinition = "integer default 0")
    public int visitGroup;  // group for 2d-graph; default 0;
    @Column(name="visit_notes", columnDefinition = "text")
    public String visitNotes;

    /**
     * Constructor for Visit
     * @param id
     * @param date
     * @param cgi
     * @param notes
     * @param patient
     */
    public Visit(String id, Date date, int cgi, String notes, int patient){
        this.visitId = id;
        this.visitDate = date;
        this.cgiScore = cgi;
        this.visitGroup = 0;
        this.visitNotes = notes;
        this.patient = Patient.find.byId(patient);
    }

    /**
     * The `userId` field is the foreign key to Table `User`:
     * "A VISIT CAN BELONG TO ONE PATIENT"
     */
    @ManyToOne(cascade = CascadeType.ALL)
    @JoinColumn(name= "patient_id", referencedColumnName = "patient_id")
    public Patient patient;

    // "A VISIT CAN HAVE MANY MEDICATIONS/DRUGS"
    // can remove the OneToMany side without any major issues
    // http://ebean-orm.github.io/docs/mapping/
    // @OneToMany(mappedBy = "prescribed_on_visit")
    // public List<Medication> medicationsList;

    /**
     * The `find` field will be used to programatically make queries
     */
    public static Finder<String, Visit> find = new Finder<String, Visit>(
        String.class, Visit.class
    );

    /**
     * Create a visit programatically.
     * A new visit record will be saved into database.
     * @param id
     * @param date
     * @param cgi
     * @param notes
     * @param patient
     * @return
     */
    public static Visit create(String id, Date date,
                               int cgi, String notes, int patient){
        Visit visit = new Visit(id, date, cgi, notes, patient);
        visit.save();
        return visit;
    }
}
